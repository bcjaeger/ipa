% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mash.R
\name{masher_soft}
\alias{masher_soft}
\title{Soft masher}
\usage{
masher_soft(
  type = "als",
  maxit = 100L,
  thresh = 1e-05,
  final.svd = TRUE,
  scale_data = TRUE,
  row.center = TRUE,
  row.scale = TRUE,
  col.center = TRUE,
  col.scale = TRUE,
  scale_iter = 20,
  scale_lambda = 0.95,
  lambda_sequence = NULL
)
}
\arguments{
\item{type}{two algorithms are implements, type="svd" or the default
type="als". The "svd" algorithm repeatedly computes the svd of the
completed matrix, and soft thresholds its singular values. Each new
soft-thresholded svd is used to re-impute the missing entries. For
large matrices of class "Incomplete", the svd is achieved by an
efficient form of alternating orthogonal ridge regression. The
"als" algorithm uses this same alternating ridge regression, but
updates the imputation at each step, leading to quite substantial
speedups in some cases. The "als" approach does not currently
have the same theoretical convergence guarantees as the
"svd" approach.}

\item{maxit}{maximum number of iterations for the \code{softImpute}
algorithm.}

\item{thresh}{convergence threshold, measured as the relative
change in the Frobenius norm between two successive estimates.}

\item{final.svd}{only applicable to type="als". The alternating
ridge-regressions do not lead to exact zeros. With the default
final.svd=TRUE, at the final iteration, a one step unregularized
iteration is performed, followed by soft-thresholding of the
singular values, leading to hard zeros.}

\item{scale_data}{(\code{TRUE} / \code{FALSE}) if \code{TRUE}, the
\link[softImpute:biScale]{biScale} function will be applied
to \code{data} before soft imputation is applied.}

\item{scale_iter}{the maximum number of iterations for the
\code{biScale} algorithm.}

\item{scale_lambda}{A number that will scale the maximum value of
\code{lambda}, a regularization parameter for \code{softImpute}.}

\item{lambda_sequence}{A numeric vector of \code{lambda} values.
This input is optional. If it is not specified, a sequence
of \code{lambda} values will be generated automatically.}
}
\value{
a list with \link[softImpute:softImpute]{softImpute} and
\link[softImpute:biScale]{biScale} inputs values that can be
passed directly into \code{softImpute_brew} objects via \link{mash}.
}
\description{
It can be a little overwhelming to remember which sets of
parameters go with each \code{ipa_brew} flavor, so just pair your
flavor with its \code{masher} function and get on with your \code{brew}.
}
