% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mash.R
\name{mash}
\alias{mash}
\alias{mash.softImpute_brew}
\alias{mash.kneighbors_brew}
\title{Mash a brew}
\usage{
mash(brew, with = NULL, ...)

\method{mash}{softImpute_brew}(brew, with = NULL, ...)

\method{mash}{kneighbors_brew}(brew, with = NULL, ...)
}
\arguments{
\item{brew}{an \code{ipa_brew} object that may or may not have
been spiced (see \link{spice}).}

\item{with}{the output of a helper function for mashing brews.
The helper functions are \link{masher_nbrs} and \link{masher_soft}}

\item{...}{additional arguments for specific brew flavors.}
}
\description{
When an \code{ipa_brew} is mashed, training data are
used to fit imputation models based on the brew flavor.
}
\section{Methods (by class)}{
\itemize{
\item \code{softImpute_brew}: Mash a soft brew (use \link{masher_soft} for \code{with}).

\item \code{kneighbors_brew}: Mash a neighbor's brew (use \link{masher_nbrs} for \code{with})
}}

\examples{

x1 = rnorm(100)
x2 = rnorm(100) + x1
x3 = rnorm(100) + x1 + x2

outcome = 0.5 * (x1 - x2 + x3)

data <- data.frame(x1=x1, x2=x2, x3=x3, outcome=outcome)

n_miss = 10

data[1:n_miss,'x1'] = NA
sft_brew <- brew_soft(data, outcome=outcome, bind_miss = FALSE) \%>\%
 verbose_on(level = 2)
mash(sft_brew, with = masher_soft(bs = FALSE))

knn_brew <- brew_nbrs(data, outcome=outcome, bind_miss = TRUE) \%>\%
 verbose_on(level = 2)
mash(knn_brew, with = masher_nbrs(fun_aggr_ctns = median))

}
