% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/test_impute_handlers.R
\name{test_nbrs}
\alias{test_nbrs}
\title{Impute test data}
\usage{
test_nbrs(data, dbl_impute = FALSE, neighbors = NULL,
  aggr_neighbors = NULL)
}
\arguments{
\item{data}{data to be imputed.}

\item{dbl_impute}{(\code{TRUE} / \code{FALSE}) if \code{TRUE}, nearest neighbors
are identified in each imputed training set, separately. If \code{FALSE},
only the original training data (with missing values) are used to
identify nearest neighbors. Additionally, when \code{dbl_impute} is \code{TRUE},
then the arguments \code{neighbors} and \code{aggr_neighbors} below will be
set automatically to match those of each imputed training set.}

\item{neighbors}{(\code{integer}) Only relevant if \code{dbl_impute} = \code{FALSE}.
The number of nearest neighbors identified for each testing
observation.}

\item{aggr_neighbors}{(\code{TRUE} / \code{FALSE}) Only relevant if
\code{dbl_impute} = \code{FALSE}. If \code{TRUE}, then the nearest neighbor
values are aggregated to form imputations. If \code{FALSE}, then
a single nearest neighbor's values are sampled randomly.}
}
\value{
An object of class 'dbl_imputer'
}
\description{
Some missing data strategies (e.g., soft imputation) are not
designed to impute missing values in testing data. However,
each observation in the testing data can be linked to a set
of nearest neighbors in the training data, and imputation
can then be completed using those nearest neighbors.
}
\note{
This function should only be applied within the \code{ferment}
function. Outside of this context, \code{test_nbrs()} has no purpose.
Additionally, when \code{dbl_impute = TRUE}, both \code{neighbors} and
\code{aggr_neighbors} are ignored. See ?ferment and vignettes for
more detailed examples
}
