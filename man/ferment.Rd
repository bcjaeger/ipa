% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ferment.R
\name{ferment}
\alias{ferment}
\title{Ferment a brew}
\usage{
ferment(brew, data_new = NULL)
}
\arguments{
\item{brew}{an \code{ipa_brew} object.}

\item{data_new}{a data frame with missing values.}
}
\description{
Missing values can occur in training data and
testing data.

Unfortunately, some imputation strategies are only designed
to impute missing training data. For example, \code{softImpute}
imputes missing values based on the index of the missing
value in the training data, and this doesn't generalize
to testing data because testing data (by definition)
do not have indices in the training data.

\code{ferment} generally adheres to the principle of using only
training data to impute missing testing data, except when it
can't (i.e., when \code{flavor = 'softImpute'}).

\code{ferment} automatically copies the data-processing and imputation
arguments used in previous brewing steps. Specifically, if \code{brew}
was called with \code{bind_miss = TRUE}, then the missing value indicator
matrix for \code{data_new} will be bound to \code{data_new} and used in the
imputation procedure. Additionally, imputation parameters specified
in the \code{spice} and \code{mash} steps will automatically be implemented
in the \code{ferment} step.
}
\note{
What is a \code{wort}? A component of a \code{brew} object that
contains imputed datasets, models used to impute those datasets,
and the corresponding hyper-parameters of those models.
}
\examples{

x1 = rnorm(100)
x2 = rnorm(100) + x1
x3 = rnorm(100) + x1 + x2

outcome = 0.5 * (x1 - x2 + x3)

n_miss = 10
x1[1:n_miss] <- NA

data <- data.frame(x1=x1, x2=x2, x3=x3, outcome=outcome)

sft_brew <- brew_soft(data, outcome=outcome, bind_miss = FALSE)
sft_brew <- mash(sft_brew, with = masher_soft(bs = TRUE))
sft_brew <- stir(sft_brew, timer = TRUE)

ferment(sft_brew)

data_new = data.frame(
  x1      = c(1/2, NA_real_),
  x2      = c(NA_real_, 2/3),
  x3      = c(5/2, 2/3),
  outcome = c(1/3, 2/3)
)

# soft models are re-fitted after stacking data_new with data_ref

ferment(sft_brew, data_new = data_new)


}
