% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impute_knn.R
\name{impute_knn}
\alias{impute_knn}
\title{Nearest neighbor imputation}
\usage{
impute_knn(
  data_ref,
  data_new = NULL,
  cols = dplyr::everything(),
  k_neighbors = 10,
  aggregate_neighbors = TRUE,
  fun_aggr_ctns = NULL,
  fun_aggr_intg = NULL,
  fun_aggr_catg = NULL,
  nthread = getOption("gd_num_thread"),
  epsilon = 1e-08,
  verbose = 0
)
}
\arguments{
\item{data_ref}{a data frame.}

\item{data_new}{an optional data frame. If supplied, then \code{data_ref}
will be used as a reference dataset for \code{data_new} and the output
will contain an imputed version of \code{data_new}. If not supplied,
the output will contain an imputed version of \code{data_ref}.}

\item{cols}{a character vector containing column names that should be
imputed.}

\item{aggregate_neighbors}{a logical value. If \code{TRUE}, then neighbors
will be aggregated to generate imputations. If \code{FALSE}, then one
neighbor will be sampled at random to generate a missing value. Using
\code{aggregate_neighbors = FALSE} can be helpful if you are conducting
multiple imputation.}

\item{fun_aggr_ctns}{a function used to aggregate neighbors for continuous
variables. If unspecified, the \code{mean()} function is used.}

\item{fun_aggr_intg}{a function used to aggregate neighbors for integer
values variables. If unspecified, the \code{medn_est()} function is used.
This function returns the median of neighbor values, rounded to the
nearest integer. \code{medn_est_conserve()} goes one step further and
identifies which neighbor value is closest to the median, and returns
that value. Both of these options can be helpful for integer valued
columns if you want to make sure the imputed values do not contain
impossible quantities, e.g. no. of children = 3/4.}

\item{fun_aggr_catg}{a function used to aggregate neighbors for categorical
variables. If unspecified, the \code{mode_est()} function is used.}

\item{nthread}{Number of threads to use for parallelization. By default,
for a dual-core machine, 2 threads are used. For any other machine n-1
cores are used so your machine doesn't freeze during a big computation.
The maximum nr of threads are determined using omp_get_max_threads
at C level.}

\item{epsilon}{Computed numbers (variable ranges) smaller than eps are
treated as zero}

\item{verbose}{a numeric value indicating how much output should be
printed to the console.
\itemize{
\item \code{0}: nothing is printed
\item \code{1}: one message is printed for each column being imputed
}}

\item{k}{a numeric vector indicating how many neighbors should be used
to impute missing values.}
}
\value{
a list of imputed datasets the same length as \code{k}.
}
\description{
This function conducts nearest neighbor imputation with the added option
of using a sequence of neighbor values instead of picking one. One
imputed dataset is created for each value of nearest neighbors
(\code{k}).
}
\examples{

data(diabetes, package = 'ipa')

trn <- diabetes$missing[1:25, ]
tst <- diabetes$missing[26:50, ]

trn_imputes <- impute_knn(data_ref = trn, k = 1:5)
tst_imputes <- impute_knn(data_ref = trn, data_new = tst, k = 1:5)

}
