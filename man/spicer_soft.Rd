% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spice.R
\name{spicer_soft}
\alias{spicer_soft}
\title{Soft spices}
\usage{
spicer_soft(
  rank_max_init = 2L,
  rank_max_ovrl = NULL,
  rank_stp_size = 1L,
  lambda = NULL,
  grid = FALSE
)
}
\arguments{
\item{rank_max_init}{an integer value that restricts the rank of the
solution for the first \code{softImpute} fit. Sequential fits may have
higher rank depending upon \code{rank_max_ovrl}, \code{rank_stp_size}, and \code{grid}.}

\item{rank_max_ovrl}{an integer value that restricts the rank of the
solution for all \code{softImpute} fits.}

\item{rank_stp_size}{an integer value that indicates how much the maximum
rank of \code{softImpute} fits should increase between iterations.}

\item{lambda}{nuclear-norm regularization parameter. If \code{lambda = 0},
the algorithm reverts to "hardImpute", for which convergence is typically
slower, and to local minimum. Ideally lambda should be chosen so that
the solution reached has rank slightly less than rank.max. See also
\code{lambda0()} for computing the smallest \code{lambda} with a zero solution.}

\item{grid}{a logical value. If \code{TRUE}, all combinations of rank and
lambda are used to fit \code{softImpute} models. If \code{FALSE}, then one
fit is supplied for each value of \code{lambda}, and increasing maximum
ranks are paired with decreasing values of \code{lambda}.}
}
\value{
a list with input values that can be passed directly into
\link{spice}, e.g \code{spice(brew, with = spicer_nbrs())} for a neighbors
brew or \code{spice(brew, with = spicer_soft())} for a soft brew.
}
\description{
If you use Rstudio, the \code{masher} and \code{spicer} functions can help
remind you which parameters go along with which \code{ipa_brew} flavor.
The basic idea is to write \verb{spice(brew, with = spicer_<flavor>())}
and \verb{mash(brew, with = masher_<flavor>())}. Hitting the tab key with
your curser inside the parentheses of \code{masher_flavor()}will create a
drop-down menu that shows a list of the arguments that go along with
your brew's flavor.

If you have no trouble remembering the parameters that go along
with your brew's flavor, or if you just want your code to be more concise,
you don't have to use the \code{with} argument. Instead, you can just
specify parameter values directly using the \code{...} argument in the \code{mash}
and \code{spice} functions. In the examples below, both approaches are shown.
}
\examples{

data <- data.frame(
  x1 = 1:10,
  x2 = 10:1,
  x3 = rnorm(10),
  outcome = 11 + runif(10)
)

data[1:2, 1:2] = NA

knn_brew <- brew(data, outcome = outcome, flavor = 'kneighbors')
sft_brew <- brew(data, outcome = outcome, flavor = 'softImpute')

# these two calls are equivalent
spicy_knn <- spice(knn_brew, with = spicer_nbrs(k_neighbors = c(3, 5)))
spicy_knn <- spice(knn_brew, k_neighbors = c(3, 5))

# these two calls are equivalent
spicy_sft <- spice(sft_brew, with = spicer_soft(grid = TRUE))
spicy_sft <- spice(sft_brew, grid = TRUE)


}
